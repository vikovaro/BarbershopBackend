1. Почему выбран JS

JS был выбран потому что на нём можно разрабатывать как серверную часть приложения, так и клиентскую. 
Коротко: фронт и бэк написаны на одном языке. Так проще для разработки.

2. Почему проект разработан на TypeScript, а не обычном JavaScript?

TypeScript добавляет в JavaScript систему типов, что делает разработку 
более надежной и предсказуемой. Ошибки несоответствия типов будут видны на стадии разработки, а не на стадии компиляции программы.
	

3. Что такое Node.js и почему он используется в проекте?

Node.js — это «движок» для запуска JavaScript на сервере.


4. Почему был выбран NestJS как основной фреймворк?

NestJS выбран потому, что он упрощает создание сложных серверных приложений. У языка уже есть готовая структура для разработки Backend приложений.


5. Как организована работа с базой данных в проекте?

В качестве БД используется PostgreSQL. Она была выбрана потому что она быстрая, поддерживает современные форматы (JSON, геоданные, массивы) и главное – полностью бесплатная.
Для работы с базой данных используется фреймворк Prisma.
Это удобная «прослойка» между кодом и базой данных. 

Фреймворк позволяет избежать использования SQL кода. Создание таблиц происходит из конфигурационного файла schema.prisma
Например, так выглядит код таблицы:

model User {
  id        Int       @id @default(autoincrement())
  login     String    @unique
  password  String
  phone     String
  full_name String
}

Также призма позволяет совершать манипуляции с базой данных непосредственно из кода на языке JS,например:

prisma.user.findUnique({
            where: {
                id: id,
            },
        });


- Аналог SELECT 



6. Как реализовано API в проекте?

API реализовано по принципам REST. Каждый ресурс имеет свой URL и поддерживает стандартные HTTP-методы (GET, POST, PUT, DELETE). Для документирования API используется Swagger, который автоматически генерирует документацию на основе декораторов в коде. 



 API (Application Programming Interface) — это набор правил, по которым одна программа может общаться с другой. В данном случае оно реализовано через get, post, put, delete. 
Например, GET запрос «получить пользователя» - проявление API, в данном случае это правило для получения пользователя.

REST – описывает определённое API у сервера. В частности, REST означает, что общение с сервером производится через HTTP методы – GET, POST, PUT, DELETE

Виды запросов REST:
GET – получить данные
POST – создать данные (создать пользователя)
PUT - полностью заменить все данные объекта (обновить ВСЕ поля пользователя)
PATCH – частично обновить данные (поменять логин пользователя)
DELETE – удаление
(!) Названия для удобства. Абсолютно все запросы можно сделать GET


HTTP – Это просто вид запроса. Он состоит из заголовка (например, в заголовке у нас может быть токен для авторизации) и тела запроса (тело содержит информацию, которую надо передать на сервер). 

Swagger – фреймворк для документации. Он позволяет по адресу localhost:3001/api посмотреть документацию к проекту. Это сделано для удобства того, что будет разрабатывать фронт. 
 
